composition

import Fugue.AWS.SNS
import Fugue.AWS
import Fugue.AWS.EC2
import Fugue.AWS.ELB
import Fugue.AWS.IAM
import Fugue.AWS.ECS
import Fugue.AWS.AutoScaling
import Fugue.AWS.SQS
import Fugue.AWS.RDS
import Fugue.AWS.Pattern.Network
import Fugue.Core.Vars
import Fugue.AWS.ELBv2

type NotificationQueue: {
  topic: Fugue.AWS.SNS.Topic,
  queue: Fugue.AWS.SQS.Queue,
  subscription: Fugue.AWS.SNS.Subscription
}

# Create a queue, a topic, and subscribe the queue to that topic.
fun newNotificationQueue {
  topicName: String,
  queueName: String,
  region: Fugue.AWS.Region,
} -> NotificationQueue:
  let topic: Fugue.AWS.SNS.Topic.new {
    name: topicName,
    region: region
  }

  let queue: Fugue.AWS.SQS.Queue.new {
    name: queueName,
    region: region
  }

  {
    topic: topic,
    queue: queue,
    subscription: Fugue.AWS.SNS.Subscription.new {
      endpoint: Fugue.AWS.SNS.Sqs(queue),
      topic: topic
    }
  }

type Fugacious: {
  queue: NotificationQueue,
  network: Fugue.AWS.Pattern.Network.Network,
  database: Fugue.AWS.RDS.DBInstance,
  cluster: Fugue.AWS.ECS.Cluster,
  services: List<Fugue.AWS.ECS.Service>,
  asg: Fugue.AWS.AutoScaling.AutoScalingGroup
}

fun newFugacious {
  prefix: String,
  region: Optional<Fugue.AWS.Region>
} -> Fugacious:
  let _region: region ?| Fugue.AWS.Us-east-1

  let network: Fugue.AWS.Pattern.Network.new {
    name: prefix ++ "network",
    cidr: "10.42.0.0/16",
    region: _region,
    publicSubnets: [
      (Fugue.AWS.B, "10.42.12.0/24"),
      (Fugue.AWS.C, "10.42.13.0/24")
    ],
    privateSubnets: [
      (Fugue.AWS.B, "10.42.22.0/24"),
      (Fugue.AWS.C, "10.42.23.0/24")
    ],
    enableNat: True,
    enableDnsSupport: True,
    enableDnsHostnames: True
  }

  let database: Fugue.AWS.RDS.DBInstance.new {
    dbInstanceIdentifier: prefix ++ "database",
    dbInstanceClass: Fugue.AWS.RDS.DB_T2_MICRO,
    engine: Fugue.AWS.RDS.Postgres,
    masterUsername: "master",
    dbName: "fugacious",
    allocatedStorage: 2048,
    securityGroups: [
      Fugue.AWS.EC2.SecurityGroup.new {
        description: "database security group",
        ipPermissions: [
          Fugue.AWS.EC2.IpPermission.postgresql(
            Fugue.AWS.EC2.IpPermission.Target.all
          )
        ],
        vpc: network.vpc
      }
    ],
    availabilityZone: None,
    dbSubnetGroup: Fugue.AWS.RDS.DBSubnetGroup.new {
      name: prefix ++ "private",
      description: "database private subnet",
      subnets: network.privateSubnets,
    },
    multiAZ: True,
    port: 5432,
    masterUserPassword: Fugue.Core.Vars.PlainText {password: "12345678"},
  }

  let sg: Fugue.AWS.EC2.SecurityGroup.new {
    vpc: network.vpc,
    description: "ECS Test Cluster Container Instances",
    ipPermissions: [
      Fugue.AWS.EC2.IpPermission.http(Fugue.AWS.EC2.IpPermission.Target.all)
    ],
  }

  let elb: Fugue.AWS.ELB.LoadBalancer.new {
    loadBalancerName: prefix ++ "web",
    subnets: network.publicSubnets,
    healthCheck: Fugue.AWS.ELB.HealthCheck.tcp {
      port: 80,
      interval: 15,
      timeout: 3,
      unhealthyThreshold: 3,
      healthyThreshold: 3,
    },
    securityGroups: [sg],
    scheme: Fugue.AWS.ELB.InternetFacing,
    listeners: [
      Fugue.AWS.ELB.Listener.new {
        protocol: Fugue.AWS.ELB.HTTP,
        loadBalancerPort: 80,
        instanceProtocol: Fugue.AWS.ELB.HTTP,
        instancePort: 80,
      },
    ],
  }

  let containerName: prefix ++ "container"
  let containerDefinition: Fugue.AWS.ECS.ContainerDefinition.new {
    name: containerName,
    image: "622401240280.dkr.ecr.us-east-1.amazonaws.com/fugacious:latest",
    memory: 256,
    portMappings: [
      Fugue.AWS.ECS.PortMapping.tcp {
        containerPort: 80,
        hostPort: 80
      }
    ],
    # The awslogs smart constructor is currently not exported so we need to use
    # the core type here.
    logConfiguration: Fugue.AWS.ECS.LogConfiguration {
      logDriver: Fugue.AWS.ECS.Awslogs,
      options: {
        "awslogs-region": Fugue.AWS.Region.toString(_region),
        "awslogs-group": "fgcs2-logs"
      }
    }
  }

  let task: Fugue.AWS.ECS.TaskDefinition.new {
    family: prefix ++ "task",
    containerDefinitions: [containerDefinition],
    region: _region
  }

  let clusterName: prefix ++ "cluster"
  let cluster: Fugue.AWS.ECS.Cluster.new {
    name: clusterName,
    region: _region
  }

  let serviceRole: Fugue.AWS.IAM.Role.new {
    roleName: prefix ++ "service-role",
    assumeRolePolicyDocument: '{
      \  "Version": "2008-10-17",
      \  "Statement": [
      \    {
      \      "Sid": "",
      \      "Effect": "Allow",
      \      "Principal": {
      \        "Service": "ecs.amazonaws.com"
      \      },
      \      "Action": "sts:AssumeRole"
      \    }
      \  ]
      \}',
    managedPolicies: [
      Fugue.AWS.IAM.ManagedPolicy.external(
        "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
      ),
    ]
  }

  let clusterInstanceRole: Fugue.AWS.IAM.Role.new {
    roleName: prefix ++ "instance-role",
    assumeRolePolicyDocument: Fugue.AWS.IAM.Policy.AssumeRole.ec2,
    managedPolicies: [
      Fugue.AWS.IAM.ManagedPolicy.external(
        "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
      ),
      Fugue.AWS.IAM.ManagedPolicy.external(
        "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
      ),
    ],
  }

  let service: Fugue.AWS.ECS.Service.new {
    name: prefix ++ "service",
    cluster: cluster,
    taskDefinition: task,
    numDesired: 1,
    role: serviceRole,
    loadBalancer: Fugue.AWS.ECS.LoadBalancer.classicLoadBalancer {
      containerName: containerName,
      containerPort: 80,
      loadBalancer: elb
    },
    deploymentConfiguration: Fugue.AWS.ECS.DeploymentConfiguration {
      minimumHealthyPercent: 60,
      maximumPercent: 150
    }
  }

  let lc: Fugue.AWS.AutoScaling.LaunchConfiguration.new {
    # ECS-optimized image.
    image: "ami-ec33cc96",
    securityGroups: [sg],
    instanceType: Fugue.AWS.EC2.T2_micro,
    iamInstanceProfile: Fugue.AWS.IAM.InstanceProfile.new {
      instanceProfileName: prefix ++ "profile",
      roles: [clusterInstanceRole]
    },
    userData: Template.render {
      data: {cluster: clusterName},
      template:
        '#!/bin/bash
        \echo ECS_CLUSTER={{cluster}} >> /etc/ecs/ecs.config
        \'
    }
  }

  let asg: Fugue.AWS.AutoScaling.AutoScalingGroup.new {
    name: prefix ++ "asg",
    launchConfiguration: lc,
    subnets: network.privateSubnets,
    loadBalancers: [],
    minSize: 2,
    maxSize: 2,
    defaultCooldown: 300,
    healthCheckType: Fugue.AWS.AutoScaling.Ec2
  }

  {
    queue: newNotificationQueue {
      topicName: prefix ++ "topic",
      queueName: prefix ++ "queue",
      region: _region
    },
    network: network,
    database: database,
    cluster: cluster,
    services: [service],
    asg: asg
  }

infra: newFugacious {prefix: "fgcs2-"}
