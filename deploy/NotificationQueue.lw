# Create a queue, a topic, and subscribe the queue to that topic.

export
    type NotificationQueue
    new

import Fugue.AWS
import Fugue.AWS.SNS
import Fugue.AWS.SQS

type NotificationQueue: {
  topic: Fugue.AWS.SNS.Topic,
  queue: Fugue.AWS.SQS.Queue,
  subscription: Fugue.AWS.SNS.Subscription
}

fun new {
  account: String,
  topicName: String,
  queueName: String,
  region: Fugue.AWS.Region,
} -> NotificationQueue:
  let topic: Fugue.AWS.SNS.Topic.new {
    name: topicName,
    region: region
  }

  let queue: Fugue.AWS.SQS.Queue.new {
    name: queueName,
    region: region,
    # In addition to just creating the subscription, we also need to set
    # permissions on the queue to allow the topic to publish to this queue.
    policy: Template.render {
      template: '{
        \  "Version": "2012-10-17",
        \  "Statement": [
        \    {
        \      "Effect": "Allow",
        \      "Principal": {
        \        "AWS": "*"
        \      },
        \      "Action": "SQS:SendMessage",
        \      "Resource": "arn:aws:sqs:{{region}}:{{account}}:{{queue}}",
        \      "Condition": {
        \        "ArnEquals": {
        \          "aws:SourceArn": "arn:aws:sns:{{region}}:{{account}}:{{topic}}"
        \        }
        \      }
        \    }
        \  ]
        \}',
      data: {
        account: account,
        topic: topicName,
        queue: queueName,
        region: Fugue.AWS.Region.toString(region)
      }
    }
  }

  {
    topic: topic,
    queue: queue,
    subscription: Fugue.AWS.SNS.Subscription.new {
      endpoint: Fugue.AWS.SNS.Sqs(queue),
      topic: topic
    }
  }
